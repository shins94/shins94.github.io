---
layout: post
title: 'LRU Cache'
subtitle: LeetCode LRU Cache 문제 풀이
date: '2019-03-15 17:55:00-0400'
background: /img/posts/IMG_8904.JPG
categories: algorithm
published: true
---

Design and implement a data structure for [Least Recently Used (LRU) cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU). It should support the following operations: `get` and `put`.

`get(key)` - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
`put(key, value)` - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

**Follow up:**
Could you do both operations in **O(1)** time complexity?

**Example:**

```
LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
```






```c++
using namespace std;

struct node {
    
    int key;
    int data;
    node* prev;
    node* next;
    
    node(int key, int data) {
        this->key = key;
        this->data = data;
    }
    
};


class LRUCache {
public:
    
    int max_capacity;
    int current_capacity = 0;
    
    map<int,list<node>::iterator> mp;
    list<node> lt;
    
    LRUCache(int capacity) {
        this->max_capacity = capacity;
    }
    
    int get(int key) {
        
        if(mp.count(key) != 0){
            
            list<node>::iterator itor = mp[key];
            int return_val = itor->data;
            lt.splice(lt.begin(),lt,itor);
            mp[key] = lt.begin();
            
            return return_val;
            
        } else {
            return -1;
        }
    }
    
    void put(int key, int value) {

        if(mp.count(key) != 0){
            
            list<node>::iterator itor = mp[key];
            itor->data = value;
            lt.splice(lt.begin(),lt,itor);
            mp[key] = lt.begin();
            
        } else {
            
            if(lt.size() >= max_capacity) {
                mp.erase(lt.back().key);
                lt.pop_back();
            }
            
            lt.push_front(node(key,value));
            mp[key] = lt.begin();
        }

    }
};
```
