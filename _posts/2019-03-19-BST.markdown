---
layout: post
title: 'Binary Search Tree'
subtitle: LeetCode BST 문제
date: '2019-03-19 13:30:00-0400'
background: /img/posts/IMG_8766-EFFECTS.jpg
categories: algorithm
published: true
---
 
**출처 : leetcode BST 문제**


이진 탐색 트리 (binary search tree) 는 이진 트리의 특별한 형태로 아래 조건과 같은 이진 검색 성질을 가진 트리이다.

1. 각 노드의 값은 왼쪽에 저장된 모든 서브 트리 노드의 값보다 커야 한다.
2. 각 노드의 값은 오른쪽에 저장된 모든 서브 트리 노드의 값보다 작아야 한다.



아래 그림은 이진 탐색 트리 (BST)의 예 이다

<center>
<img src = "https://leetcode.com/explore/learn/card/introduction-to-data-structure-binary-search-tree/140/introduction-to-a-bst/Figures/binary_search_tree/BST_example.png">
</center>

위 그림에서 볼 수 있듯이 루트노드 5의 경우를 보면 왼쪽에 위치한 모든 노드들 보다 큰값을 가지고 있다.
반대로 오른쪽에 위치한 모든 노드들 모다는 작은 값을 가진다.



Leetcode 강의 에서는 세가지 문제가 나왔다. **Validate a BST, inorder traversal, inorder successor** 각각의 문제를 풀어 보겠다.


**Validate Binary Search Tree**

------

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

- The left subtree of a node contains only nodes with keys **less than** the node's key.
- The right subtree of a node contains only nodes with keys **greater than** the node's key.
- Both the left and right subtrees must also be binary search trees.

**Example 1:**

```
Input:
    2
   / \
  1   3
Output: true
```

**Example 2:**

```
    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.
```
 
주어진 이진 트리가 BST 인지 증명하는 문제이다.
증명 방법은 위에 나온 것처럼 이진 검색 트리의 정의를 활용하면 된다. 현재 노드에서 왼쪽의 위치한 
자식 노드가 가질수 있는 값은 무조건 현재 노드의 값보다 작아야 한다. 그리고 현재 노드에서 오른쪽에 
위치한 노드는 무조건 현재 노드의 값보다는 커야 한다. 
이 조건을 체크한 결과가 참이면 재귀적으로 현재 노드의 오른쪽 노드, 왼쪽 노드로 내려가서 다시 
조건을 체크해가면 현재 트리가 BST인지를 확인 할 수 있다. 






 
 
